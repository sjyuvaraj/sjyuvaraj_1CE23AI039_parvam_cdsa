// Node class for a doubly linked list
class Node {
    int data;     
    Node next;     
    Node prev;     

  
    public Node(int data) {
        this.data = data;
        this.next = null;
        this.prev = null;
    }
}


class DoublyLinkedList {
    Node head;  

    
    public DoublyLinkedList() {
        this.head = null;
    }

  
    public void insertAtBeginning(int data) {
        Node newNode = new Node(data);
        if (head == null) {
            head = newNode;
        } else {
            newNode.next = head; 
            head.prev = newNode; 
            head = newNode;      
        }
    }

   
    public void insertAtEnd(int data) {
        Node newNode = new Node(data);
        if (head == null) {
            head = newNode; 
            return;
        }
        Node last = head;
        while (last.next != null) {
            last = last.next; 
        }
        last.next = newNode; 
        newNode.prev = last; 
    }

   
    public void deleteNode(int key) {
        Node current = head;

       
        if (current == null) {
            return;
        }

      
        while (current != null && current.data != key) {
            current = current.next;
        }

        
        if (current == null) {
            return;
        }

        
        if (current == head) {
            head = current.next; 
            if (head != null) {
                head.prev = null; 
            }
        } else {
            // Update the previous and next pointers of surrounding nodes
            if (current.next != null) {
                current.next.prev = current.prev; 
            }
            if (current.prev != null) {
                current.prev.next = current.next; 
            }
        }
    }

    
    public void displayForward() {
        Node current = head;
        while (current != null) {
            System.out.print(current.data + " <-> ");
            current = current.next;
        }
        System.out.println("null");
    }

   
    public void displayBackward() {
        Node current = head;
       
        while (current != null && current.next != null) {
            current = current.next;
        }
        
        while (current != null) {
            System.out.print(current.data + " <-> ");
            current = current.prev;
        }
        System.out.println("null");
    }

    public static void main(String[] args) {
        DoublyLinkedList dll = new DoublyLinkedList();
        dll.insertAtEnd(1);
        dll.insertAtEnd(2);
        dll.insertAtBeginning(0);
        System.out.println("List after insertions (forward):");
        dll.displayForward(); 

        dll.deleteNode(1);
        System.out.println("List after deletion of 1 (forward):");
        dll.displayForward(); 

        System.out.println("List displayed backward:");
        dll.displayBackward(); 
    }
}